<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 4.0.0-dev (doctrine2-zf2inputfilterannotation dev) on 2023-06-04
 * 18:56:31.
 * Goto
 * https://github.com/mysql-workbench-schema-exporter/mysql-workbench-schema-exporter
 * for more information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Laminas\InputFilter\InputFilter;
use Laminas\InputFilter\Factory as InputFactory;
use Laminas\InputFilter\InputFilterAwareInterface;
use Laminas\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Data
 *
 * @ORM\Entity(repositoryClass="DataRepository")
 * @ORM\Table(name="`data`", options={})
 */
class Data implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * 公司名稱
     *
     * @ORM\Column(type="string", length=45, nullable=true, options={"comment": "公司名稱"})
     */
    protected $company;

    /**
     * 進貨日期
     *
     * @ORM\Column(type="date", nullable=true, options={"comment": "進貨日期"})
     */
    protected $purchase_date;

    /**
     * 品項名稱
     *
     * @ORM\Column(type="string", length=45, nullable=true, options={"comment": "品項名稱"})
     */
    protected $item_name;

    /**
     * 基金
     *
     * @ORM\Column(name="`type`", type="string", length=45, nullable=true, options={"comment": "基金"})
     */
    protected $type;

    /**
     * 上日結存
     *
     * @ORM\Column(name="`a`", type="integer", nullable=true, options={"comment": "上日結存"})
     */
    protected $a;

    /**
     * 上日粒數
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "上日粒數"})
     */
    protected $b;

    /**
     * 進貨量
     *
     * @ORM\Column(name="`c`", type="integer", nullable=true, options={"comment": "進貨量"})
     */
    protected $c;

    /**
     * 進貨粒數
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "進貨粒數"})
     */
    protected $d;

    /**
     * 進料處理量
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "進料處理量"})
     */
    protected $e;

    /**
     * 處理粒數
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "處理粒數"})
     */
    protected $f;

    /**
     * 本日盤盈虧
     *
     * @ORM\Column(name="`g`", type="integer", nullable=true, options={"comment": "本日盤盈虧"})
     */
    protected $g;

    /**
     * 盤盈虧粒數
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "盤盈虧粒數"})
     */
    protected $h;

    /**
     * 本日結存
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "本日結存"})
     */
    protected $i;

    /**
     * 本日粒數
     *
     * @ORM\Column(type="integer", nullable=true, options={"comment": "本日粒數"})
     */
    protected $j;

    /**
     * 備註
     *
     * @ORM\Column(type="text", nullable=true, options={"comment": "備註"})
     */
    protected $remarks;

    public function __construct()
    {
    }

    /**
     * Set the value of id.
     *
     * @param int $id
     *
     * @return \Base\Entity\Data
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of company.
     *
     * @param string $company
     *
     * @return \Base\Entity\Data
     */
    public function setCompany($company)
    {
        $this->company = $company;

        return $this;
    }

    /**
     * Get the value of company.
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->company;
    }

    /**
     * Set the value of purchase_date.
     *
     * @param \DateTime $purchase_date
     *
     * @return \Base\Entity\Data
     */
    public function setPurchaseDate($purchase_date)
    {
        $this->purchase_date = $purchase_date;

        return $this;
    }

    /**
     * Get the value of purchase_date.
     *
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->purchase_date;
    }

    /**
     * Set the value of item_name.
     *
     * @param string $item_name
     *
     * @return \Base\Entity\Data
     */
    public function setItemName($item_name)
    {
        $this->item_name = $item_name;

        return $this;
    }

    /**
     * Get the value of item_name.
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->item_name;
    }

    /**
     * Set the value of type.
     *
     * @param string $type
     *
     * @return \Base\Entity\Data
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get the value of type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set the value of a.
     *
     * @param int $a
     *
     * @return \Base\Entity\Data
     */
    public function setA($a)
    {
        $this->a = $a;

        return $this;
    }

    /**
     * Get the value of a.
     *
     * @return int
     */
    public function getA()
    {
        return $this->a;
    }

    /**
     * Set the value of b.
     *
     * @param int $b
     *
     * @return \Base\Entity\Data
     */
    public function setB($b)
    {
        $this->b = $b;

        return $this;
    }

    /**
     * Get the value of b.
     *
     * @return int
     */
    public function getB()
    {
        return $this->b;
    }

    /**
     * Set the value of c.
     *
     * @param int $c
     *
     * @return \Base\Entity\Data
     */
    public function setC($c)
    {
        $this->c = $c;

        return $this;
    }

    /**
     * Get the value of c.
     *
     * @return int
     */
    public function getC()
    {
        return $this->c;
    }

    /**
     * Set the value of d.
     *
     * @param int $d
     *
     * @return \Base\Entity\Data
     */
    public function setD($d)
    {
        $this->d = $d;

        return $this;
    }

    /**
     * Get the value of d.
     *
     * @return int
     */
    public function getD()
    {
        return $this->d;
    }

    /**
     * Set the value of e.
     *
     * @param int $e
     *
     * @return \Base\Entity\Data
     */
    public function setE($e)
    {
        $this->e = $e;

        return $this;
    }

    /**
     * Get the value of e.
     *
     * @return int
     */
    public function getE()
    {
        return $this->e;
    }

    /**
     * Set the value of f.
     *
     * @param int $f
     *
     * @return \Base\Entity\Data
     */
    public function setF($f)
    {
        $this->f = $f;

        return $this;
    }

    /**
     * Get the value of f.
     *
     * @return int
     */
    public function getF()
    {
        return $this->f;
    }

    /**
     * Set the value of g.
     *
     * @param int $g
     *
     * @return \Base\Entity\Data
     */
    public function setG($g)
    {
        $this->g = $g;

        return $this;
    }

    /**
     * Get the value of g.
     *
     * @return int
     */
    public function getG()
    {
        return $this->g;
    }

    /**
     * Set the value of h.
     *
     * @param int $h
     *
     * @return \Base\Entity\Data
     */
    public function setH($h)
    {
        $this->h = $h;

        return $this;
    }

    /**
     * Get the value of h.
     *
     * @return int
     */
    public function getH()
    {
        return $this->h;
    }

    /**
     * Set the value of i.
     *
     * @param int $i
     *
     * @return \Base\Entity\Data
     */
    public function setI($i)
    {
        $this->i = $i;

        return $this;
    }

    /**
     * Get the value of i.
     *
     * @return int
     */
    public function getI()
    {
        return $this->i;
    }

    /**
     * Set the value of j.
     *
     * @param int $j
     *
     * @return \Base\Entity\Data
     */
    public function setJ($j)
    {
        $this->j = $j;

        return $this;
    }

    /**
     * Get the value of j.
     *
     * @return int
     */
    public function getJ()
    {
        return $this->j;
    }

    /**
     * Set the value of remarks.
     *
     * @param string $remarks
     *
     * @return \Base\Entity\Data
     */
    public function setRemarks($remarks)
    {
        $this->remarks = $remarks;

        return $this;
    }

    /**
     * Get the value of remarks.
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->remarks;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Laminas\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = [
            [
                'name' => 'id',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'company',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 45
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'purchase_date',
                'required' => false,
                'filters' => [],
                'validators' => [],
            ],
            [
                'name' => 'item_name',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 45
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'type',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\StripTags'],
                                    ['name' => 'Laminas\Filter\StringTrim'],
                                ],
                'validators' => [
                                    [
                                        'name' => 'Laminas\Validator\StringLength',
                                        'options' => [
                                            'encoding' => 'UTF-8',
                                            'min' => 0,
                                            'max' => 45
                                        ],
                                    ],
                                ],
            ],
            [
                'name' => 'a',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'b',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'c',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'd',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'e',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'f',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'g',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'h',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'i',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'j',
                'required' => false,
                'filters' => [
                                    ['name' => 'Laminas\Filter\ToInt'],
                                ],
                'validators' => [
                                    ['name' => 'Laminas\I18n\Validator\IsInt'],
                                ],
            ],
            [
                'name' => 'remarks',
                'required' => false,
                'filters' => [
                                ],
                'validators' => [],
            ],
        ];
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = [])
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = [])
    {
        $dataFields = ['id', 'company', 'purchase_date', 'item_name', 'type', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'remarks'];
        $relationFields = [];
        $copiedFields = [];
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, [$relationField]);
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return ['id', 'company', 'purchase_date', 'item_name', 'type', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'remarks'];
    }
}